        // define the control net of the bicubic Bezier patch
        _patch.SetData (0, 0, 2.0, 2.0, 0.0);
        _patch.SetData (0, 1, 2.0, 1.0, 0.0);
        _patch.SetData (0, 2, 2.0, 0.0, 0.0);
        _patch.SetData (0, 3, 2.0, 2.0, 0.0);
        _patch.SetData (1, 0, 0.0, -2.0, 0.0);
        _patch.SetData (1, 1, 1.0, -1.0, 2.0);
        _patch.SetData (1, 2, 1.0, 1.0, 2.0);
        _patch.SetData (1, 3, 0.0, 2.0, 0.0);
        _patch.SetData (2, 0, 1.0, -9.0, 0.0);
        _patch.SetData (2, 1, 1.0, -1.0, 2.0);
        _patch.SetData (2, 2, 1.0, 1.0, 2.0);
        _patch.SetData (2, 3, 1.0, 2.0, 0.0);
        _patch.SetData (3, 0, 2.0, -2.0, 0.0);
        _patch.SetData (3, 1, 2.0, -1.0, 0.0);
        _patch.SetData (3, 2, 2.0, 1.0, 0.0);
        _patch.SetData (3, 3, 2.0, 2.0, 0.0);

        // generate the mesh of the surface patch
        _before_interpolation = _patch.GenerateImage (100, 100, GL_STATIC_DRAW);

        if (_before_interpolation)
            _before_interpolation->UpdateVertexBufferObjects();

        // define an interpolation problem :
        // 1: create a knot vector in u−direction

        RowMatrix<GLdouble> u_knot_vector(4);
        u_knot_vector(0) = 0.0;
        u_knot_vector(1) = 1.0 / 3.0;
        u_knot_vector(2) = 2.0 / 3.0;
        u_knot_vector(3) = 1.0;

        // 2: create a knot vector in v−direction
        ColumnMatrix<GLdouble> v_knot_vector(4);
        v_knot_vector(0) = 0.0;
        v_knot_vector(1) = 1.0 / 3.0;
        v_knot_vector(2) = 2.0 / 3.0;
        v_knot_vector(3) = 1.0;
        // 3: define a matrix of data points , e . g . set them to the o r i g i n a l control points
        Matrix<DCoordinate3> data_points_to_interpolate (4, 4);
        for (GLuint row = 0; row < 4; ++row)
            for ( GLuint column = 0; column < 4; ++column)
                _patch.GetData(row , column, data_points_to_interpolate (row, column));

        // 4: solve the interpolation problem and generate the mesh of the interpolating patch
        if (_patch.UpdateDataForInterpolation(u_knot_vector, v_knot_vector, data_points_to_interpolate))
        {
            _after_interpolation = _patch.GenerateImage (100, 100, GL_STATIC_DRAW);

            if (_after_interpolation)
                _after_interpolation->UpdateVertexBufferObjects();
        }



            if (_before_interpolation)
            {
                MatFBRuby.Apply();
                _before_interpolation->Render(GL_POINTS);
            }
            if (_after_interpolation)
            {
                glEnable(GL_BLEND);
                glDepthMask(GL_FALSE);
                glBlendFunc(GL_SRC_ALPHA, GL_ONE);
                glColor3f (0.70f, 0.32f, 0.239f);

                MatFBTurquoise.Apply();
                _after_interpolation->Render(GL_POINTS);
                glDepthMask(GL_TRUE);
                glDisable(GL_BLEND);
            }

if(_before_interpolation)
        {
            delete _before_interpolation;
            _before_interpolation = 0;
        }

        if(_after_interpolation)
        {
            delete _after_interpolation;
            _after_interpolation = 0;
        }
TriangulatedMesh3 *_after_interpolation, *_before_interpolation;
